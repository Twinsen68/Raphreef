substitutions:
  dallasPin: "16"
  update_temp: "60s"

  # Calibration variables
  # 0C using Ice Water; 100C using Boiling Water  
  # Calibration Temp. 1
  cal_0: "0.0"
  cal_100: "100.0"
  range_cool: "74"
  range_warm: "82"

# 18B20 sensor Pin
one_wire:
  - platform: gpio
    pin: ${dallasPin}

sensor:
  # Temperature Probe 1
  - platform: dallas_temp
    id: temp_1
    icon: mdi:thermometer-water
    name: "Température"
    state_class: "measurement"
    device_class: "temperature"
    update_interval: "${update_temp}"
    filters:
      - calibrate_linear:
          method: least_squares
          datapoints:
            - 0.0 -> ${cal_0}
            - 100.0 -> ${cal_100}
    on_value: 
      then:
        - component.update: temp_range

  # Calibration Temp. at 0C
  - platform: template
    name: Calibration à 0°C - Temp. 1
    id: cal_0_sen
    icon: mdi:thermometer-low
    unit_of_measurement: "°C"
    disabled_by_default: true
    state_class: "measurement"
    device_class: "temperature"
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_0}};

  # Calibration Temp. at 100C
  - platform: template
    name: Calibration à 100°C - Temp. 1
    id: cal_100_sen
    icon: mdi:thermometer-high
    unit_of_measurement: "°C"
    disabled_by_default: true
    state_class: "measurement"
    device_class: "temperature"
    entity_category: "diagnostic"
    lambda: |-
      return {${cal_100}};

  # Température extérieure (capteur virtuel pour simuler les saisons)
  - platform: template
    name: "Température extérieure"
    id: outdoor_temperature
    unit_of_measurement: "°C"
    lambda: |-
      return 25.0;  // Modifiez cette valeur si un capteur réel est disponible


binary_sensor:
  # Température critique (hors de 22°C à 30°C)
  - platform: template
    name: "Température critique"
    id: critical_temperature
    lambda: |-
      float temp = id(water_temperature).state;
      return (temp < 22.0 || temp > 30.0);  // Vrai si hors des limites critiques
    device_class: problem

  # Température optimale (selon la saison)
  - platform: template
    name: "Température optimale"
    id: optimal_temperature
    lambda: |-
      float temp = id(water_temperature).state;
      float outdoor_temp = id(outdoor_temperature).state;

      if (outdoor_temp > 20.0) {  // Saison chaude
        return (temp >= 24.0 && temp <= 27.0);
      } else {  // Saison froide
        return (temp >= 23.0 && temp <= 24.0);
      }
    device_class: safety


text_sensor:
  - platform: template
    name: "Diagnostic température"
    id: temperature_status
    lambda: |-
      float temp = id(water_temperature).state;
      float outdoor_temp = id(outdoor_temperature).state;

      if (temp < 22.0) return {"DANGER : Trop froid (<22°C)"};
      if (temp > 30.0) return {"DANGER : Trop chaud (>30°C)"};

      if (outdoor_temp > 20.0) {
        if (temp >= 24.0 && temp <= 27.0) return {"OK : Température optimale (saison chaude)"};
        return {"Alerte : Hors plage saison chaude (24-27°C)"};
      } else {
        if (temp >= 23.0 && temp <= 24.0) return {"OK : Température optimale (saison froide)"};
        return {"Alerte : Hors plage saison froide (23-24°C)"};
      }
    icon: mdi:thermometer-alert


number:
  # Temperature 1 when Cool
  - platform: template
    name: "Temp. lim. froide"
    id: range_cool
    icon: mdi:thermometer-low
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${range_cool}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: temp_range

  # Temperature 1 when Warm
  - platform: template
    name: "Temp. lim. chaude"
    icon: mdi:thermometer-high
    id: range_warm
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${range_warm}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: temp_range